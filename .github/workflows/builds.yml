name: Build and Release Python App

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --name snake main.py

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snake-windows
          path: dist/snake.exe

  build-mac:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PyInstaller and Pillow
        run: |
          pip install pyinstaller pillow

      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --name snake main.py

      - name: Create .app Bundle
        run: |
          mkdir -p Snake.app/Contents/MacOS
          cp dist/snake Snake.app/Contents/MacOS/snake

      - name: Generate ASCII Art PNG
        run: |
          python3 - <<EOF
          from PIL import Image, ImageDraw, ImageFont
          ascii_art = '''
  _____              _        
 / ____|            | |       
| (___   ___  _ __  | | _____ 
 \\___ \\ / _ \\| '_ \\ | |/ / __|
 ____) | (_) | | | ||   <\\__ \\
|_____/ \\___/|_| |_||_|\\_\\___/
                              
Drag Snake.app to Applications to install!
          '''.splitlines()
          W, H = 600, 400
          img = Image.new("RGB", (W, H), (240, 240, 240))
          draw = ImageDraw.Draw(img)
          try:
              font = ImageFont.truetype("Menlo.ttc", 24)
          except Exception:
              font = ImageFont.load_default()
          y = 60
          for line in ascii_art:
              draw.text((40, y), line, font=font, fill=(0,0,0))
              y += 34
          img.save("dmg-background.png")
          EOF

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Create DMG Installer
        run: |
          mkdir -p dmg_source/Applications
          mv Snake.app dmg_source/
          create-dmg \
            --volname "Snake Installer" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon Snake.app 150 200 \
            --icon Applications 450 200 \
            --background dmg-background.png \
            dmg_source/Snake.dmg \
            dmg_source/

      - name: Upload Mac DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snake-mac
          path: dmg_source/Snake.dmg

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-mac]

    steps:
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: snake-windows

      - name: Download Mac DMG Artifact
        uses: actions/download-artifact@v4
        with:
          name: snake-mac

      - name: Set Release Version (auto-increment)
        id: version
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+$' | head -n 1)
          if [ -z "$latest_tag" ]; then
            echo "VERSION=1.0" >> $GITHUB_ENV
          else
            major=$(echo $latest_tag | cut -d. -f1 | sed 's/v//')
            minor=$(echo $latest_tag | cut -d. -f2)
            next_minor=$((minor + 1))
            echo "VERSION=${major}.${next_minor}" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: "Release v${{ env.VERSION }}"
          draft: false
          prerelease: false
          files: |
            snake.exe
            dmg_source/Snake.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
